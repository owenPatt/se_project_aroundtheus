!function(){"use strict";class e{constructor(e,t,s,i,n){let{name:r,link:o,_id:a,isLiked:l}=e;this.name=r,this.link=o,this.id=a,this._initialState=l,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteBtnClick=i,this._handleLikeBtnClick=n}setLikeBtnState=()=>{this._likeBtn.classList.toggle("card__like-button_active")};isLiked=()=>this._likeBtn.classList.contains("card__like-button_active");handleDelete=()=>{this._cardElement.remove()};_setEventListeners(){this._likeBtn.addEventListener("click",(()=>{this._handleLikeBtnClick(this)})),this._deleteBtn.addEventListener("click",(()=>{this._handleDeleteBtnClick(this)})),this._imageEl.addEventListener("click",(()=>{this._handleImageClick(this)}))}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0),this._likeBtn=this._cardElement.querySelector(".card__like-button"),this._deleteBtn=this._cardElement.querySelector(".card__delete-button"),this._imageEl=this._cardElement.querySelector(".card__image"),this._titleEl=this._cardElement.querySelector(".card__title"),this._setEventListeners(),this._imageEl.src=this.link,this._imageEl.alt=this.name,this._titleEl.textContent=this.name,this._initialState&&this.setLikeBtnState(),this._cardElement}}class t{constructor(e,t){this._config=e,this._formEl=t}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.classList.add(this._config.errorMessageClassVisible),t.textContent=e.validationMessage}_hideInputError(e){this._formEl.querySelector(`#${e.id}-error`).classList.remove(this._config.errorMessageClassVisible),e.classList.remove(this._config.inputErrorClass)}_checkValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_allInputsValid(){return this._inputEls.every((e=>e.validity.valid))}_toggleButtonState(){this._allInputsValid()?(this._submitButton.classList.remove(this._config.inactiveButtonClass),this._submitButton.removeAttribute("disabled")):(this._submitButton.classList.add(this._config.inactiveButtonClass),this._submitButton.setAttribute("disabled",!0))}_setEventListeners(){this._submitButton=this._formEl.querySelector(this._config.submitButtonSelector),this._toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._inputEls=[...this._formEl.querySelectorAll(this._config.inputSelector)],this._setEventListeners()}setButtonState(){this._toggleButtonState()}clearValidationErrors(){this._inputEls.forEach((e=>{this._hideInputError(e)}))}}const s={formSelector:".modal__form",inputSelector:".modal__item",submitButtonSelector:".modal__button",errorMessageClass:"modal__error",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__item_type_error",errorMessageClassVisible:"modal__error_visible"};class i{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this.addItem(this._renderer(e))}))}addItem(e){this._container.insertAdjacentElement("afterbegin",e)}}class n{constructor(e){this._popupEl=document.querySelector(e)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};loading(e){this._submitBtn.textContent=e?"Saving...":"Save"}open(){this._popupEl.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupEl.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._submitBtn=this._popupEl.querySelector(".modal__button"),this._popupEl.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends n{constructor(e,t){super(e),this._handleSubmitForm=t,this._formEl=this._popupEl.querySelector(".modal__form"),this._inputEls=Array.from(this._popupEl.querySelectorAll(".modal__item"))}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._formEl.addEventListener("submit",(e=>{this._handleSubmitForm(e,this._getInputValues())}))}close(){super.close(),this._formEl.reset()}}const o=document.querySelector("#profile-edit-button"),a=document.querySelector("#profile-avatar"),l=document.querySelector("#profile-edit-modal"),c=l.querySelector("#profile-modal-name-input"),d=l.querySelector("#profile-modal-description-input"),h=document.querySelector("#add-card-button"),_=new t(s,document.forms["profile-modal-form"]),u=new t(s,document.forms["card-modal-form"]),m=new t(s,document.forms["avatar-modal-form"]);_.enableValidation(),u.enableValidation(),m.enableValidation();const p=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.json())).then((e=>e)).catch((e=>console.log(e)))}getCurrentUser(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.json())).then((e=>e)).catch((e=>console.log(e)))}updateUser(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}createCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})})}deleteCard(e){fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e)))}likeCard(e){fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e)))}dislikeCard(e){fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"c2b0fb8f-5e2c-45d3-9e40-bbe48905b446","content-type":"application/json"}});let E;p.getInitialCards().then((e=>{E=new i({items:e,renderer:B},".cards__list"),E.renderItems()}));const f=new r("#profile-edit-modal",(function(e,t){let{title:s,description:i}=t;e.preventDefault(),f.loading(!0),p.updateUser(s,i).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e))).finally((()=>{L.setUserInfo(s,i),f.loading(!1),f.close()}))})),v=new r("#card-add-modal",(function(e,t){e.preventDefault(),v.loading(!0),p.createCard(t.name,t.link).then((e=>e.json())).then((e=>{t._id=e._id})).catch((e=>console.log(e))).finally((()=>{E.addItem(B(t)),v.loading(!1),v.close()}))})),g=new r("#avatar-modal",(function(e,t){let{link:s}=t;e.preventDefault(),g.loading(!0),p.updateAvatar(s).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e))).finally((()=>{L.setAvatar(s),g.loading(!1),g.close()}))})),b=new class extends n{constructor(e){super(e),this._pictureEl=this._popupEl.querySelector(".modal__image"),this._captionEl=this._popupEl.querySelector(".modal__title")}open(e,t){this._pictureEl.src=e,this._pictureEl.alt=t,this._captionEl.innerText=t,super.open()}}("#picture-modal"),S=new class extends n{constructor(e,t){super(e),this._handleButtonClick=t,this._button=this._popupEl.querySelector(".modal__button")}setEventListeners(){super.setEventListeners(),this._button.addEventListener("click",(()=>{this._handleButtonClick(this._calledEl)}))}open(e){super.open(),this._calledEl=e}close(){super.close(),this._calledEl=null}}("#card-delete-modal",(function(e){e.handleDelete(),p.deleteCard(e.id),S.close()}));f.setEventListeners(),v.setEventListeners(),g.setEventListeners(),b.setEventListeners(),S.setEventListeners();const L=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s),this._avatarEl=document.querySelector(i),this._name=this._nameEl.textContent,this._job=this._jobEl.textContent,this._avatar=this._avatarEl.src}_setPage(){this._jobEl.textContent=this._job,this._nameEl.textContent=this._name,this._avatarEl.src=this._avatar}getUserInfo(){return{name:this._name,job:this._job}}setUserInfo(e,t){this._name=e,this._job=t,this._setPage()}setAvatar(e){this._avatar=e,this._setPage()}}({nameSelector:"#profile-title",jobSelector:"#profile-description",avatarSelector:"#profile-image"});function k(e){b.open(e.link,e.name)}function y(e){S.open(e)}function C(e){e.isLiked()?p.dislikeCard(e.id):p.likeCard(e.id),e.setLikeBtnState()}function B(t){return new e(t,"#card-template",k,y,C).getView()}p.getCurrentUser().then((e=>{L.setUserInfo(e.name,e.about),L.setAvatar(e.avatar)})),o.addEventListener("click",(()=>{!function(){const e=L.getUserInfo();c.value=e.name,d.value=e.job}(),_.setButtonState(),_.clearValidationErrors(),f.open()})),h.addEventListener("click",(()=>{u.setButtonState(),u.clearValidationErrors(),v.open()})),a.addEventListener("click",(()=>{m.setButtonState(),m.clearValidationErrors(),g.open()})),document.querySelector("body").classList.remove("no-transition")}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,