!function(){"use strict";class e{constructor(e,t,s,i,n){let{name:r,link:o,_id:a,isLiked:l}=e;this.name=r,this.link=o,this.id=a,this._initialState=l,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteBtnClick=i,this._handleLikeBtnClick=n}setLikeBtnState=()=>{this._likeBtn.classList.toggle("card__like-button_active")};isLiked=()=>this._likeBtn.classList.contains("card__like-button_active");handleDelete=()=>{this._cardElement.remove()};_setEventListeners(){this._likeBtn.addEventListener("click",(()=>{this._handleLikeBtnClick(this)})),this._deleteBtn.addEventListener("click",(()=>{this._handleDeleteBtnClick(this)})),this._imageEl.addEventListener("click",(()=>{this._handleImageClick(this)}))}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0),this._likeBtn=this._cardElement.querySelector(".card__like-button"),this._deleteBtn=this._cardElement.querySelector(".card__delete-button"),this._imageEl=this._cardElement.querySelector(".card__image"),this._titleEl=this._cardElement.querySelector(".card__title"),this._setEventListeners(),this._imageEl.src=this.link,this._imageEl.alt=this.name,this._titleEl.textContent=this.name,this._initialState&&this.setLikeBtnState(),this._cardElement}}class t{constructor(e,t){this._config=e,this._formEl=t}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.classList.add(this._config.errorMessageClassVisible),t.textContent=e.validationMessage}_hideInputError(e){this._formEl.querySelector(`#${e.id}-error`).classList.remove(this._config.errorMessageClassVisible),e.classList.remove(this._config.inputErrorClass)}_checkValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_allInputsValid(){return this._inputEls.every((e=>e.validity.valid))}_toggleButtonState(){this._allInputsValid()?(this._submitButton.classList.remove(this._config.inactiveButtonClass),this._submitButton.removeAttribute("disabled")):(this._submitButton.classList.add(this._config.inactiveButtonClass),this._submitButton.setAttribute("disabled",!0))}_setEventListeners(){this._submitButton=this._formEl.querySelector(this._config.submitButtonSelector),this._toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._inputEls=[...this._formEl.querySelectorAll(this._config.inputSelector)],this._setEventListeners()}setButtonState(){this._toggleButtonState()}clearValidationErrors(){this._inputEls.forEach((e=>{this._hideInputError(e)}))}}const s={formSelector:".modal__form",inputSelector:".modal__item",submitButtonSelector:".modal__button",errorMessageClass:"modal__error",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__item_type_error",errorMessageClassVisible:"modal__error_visible"};class i{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this.addItem(this._renderer(e))}))}addItem(e){this._container.insertAdjacentElement("afterbegin",e)}}class n{constructor(e){this._popupEl=document.querySelector(e)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};loading(e){this._submitBtn.textContent=e?"Saving...":"Save"}open(){this._popupEl.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupEl.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._submitBtn=this._popupEl.querySelector(".modal__button"),this._popupEl.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends n{constructor(e,t){super(e),this._handleSubmitForm=t,this._formEl=this._popupEl.querySelector(".modal__form"),this._inputEls=Array.from(this._popupEl.querySelectorAll(".modal__item"))}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._formEl.addEventListener("submit",(e=>{this._handleSubmitForm(e,this._getInputValues())}))}close(){super.close(),this._formEl.reset()}}const o=document.querySelector("#profile-edit-button"),a=document.querySelector("#profile-avatar"),l=document.querySelector("#profile-edit-modal"),c=l.querySelector("#profile-modal-name-input"),d=l.querySelector("#profile-modal-description-input"),h=document.querySelector("#add-card-button"),_=new t(s,document.forms["profile-modal-form"]),u=new t(s,document.forms["card-modal-form"]),m=new t(s,document.forms["avatar-modal-form"]);_.enableValidation(),u.enableValidation(),m.enableValidation();const p=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.json())).then((e=>e)).catch((e=>console.log(e)))}getCurrentUser(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.json())).then((e=>e)).catch((e=>console.log(e)))}updateUser(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}createCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})})}deleteCard(e){fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e)))}likeCard(e){fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e)))}dislikeCard(e){fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"c2b0fb8f-5e2c-45d3-9e40-bbe48905b446","content-type":"application/json"}});let E;p.getInitialCards().then((e=>{E=new i({items:e,renderer:B},".cards__list"),E.renderItems()}));const f=new r("#profile-edit-modal",(function(e,t){let{title:s,description:i}=t;e.preventDefault(),f.loading(!0),p.updateUser(s,i).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e))).finally((()=>{L.setUserInfo(s,i),f.loading(!1),f.close()}))})),v=new r("#card-add-modal",(function(e,t){e.preventDefault(),v.loading(!0),p.createCard(t.name,t.link).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e))).finally((()=>{E.addItem(B(t)),v.loading(!1),v.close()}))})),g=new r("#avatar-modal",(function(e,t){let{link:s}=t;e.preventDefault(),g.loading(!0),p.updateAvatar(s).then((e=>e.json())).then((e=>{console.log(e)})).catch((e=>console.log(e))).finally((()=>{L.setAvatar(s),g.loading(!1),g.close()}))})),b=new class extends n{constructor(e){super(e),this._pictureEl=this._popupEl.querySelector(".modal__image"),this._captionEl=this._popupEl.querySelector(".modal__title")}open(e,t){this._pictureEl.src=e,this._pictureEl.alt=t,this._captionEl.innerText=t,super.open()}}("#picture-modal"),S=new class extends n{constructor(e,t){super(e),this._handleButtonClick=t,this._button=this._popupEl.querySelector(".modal__button")}setEventListeners(){super.setEventListeners(),this._button.addEventListener("click",(()=>{this._handleButtonClick(this._calledEl)}))}open(e){super.open(),this._calledEl=e}close(){super.close(),this._calledEl=null}}("#card-delete-modal",(function(e){e.handleDelete(),p.deleteCard(e.id),S.close()}));f.setEventListeners(),v.setEventListeners(),g.setEventListeners(),b.setEventListeners(),S.setEventListeners();const L=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s),this._avatarEl=document.querySelector(i),this._name=this._nameEl.textContent,this._job=this._jobEl.textContent,this._avatar=this._avatarEl.src}_setPage(){this._jobEl.textContent=this._job,this._nameEl.textContent=this._name,this._avatarEl.src=this._avatar}getUserInfo(){return{name:this._name,job:this._job}}setUserInfo(e,t){this._name=e,this._job=t,this._setPage()}setAvatar(e){this._avatar=e,this._setPage()}}({nameSelector:"#profile-title",jobSelector:"#profile-description",avatarSelector:"#profile-image"});function k(e){b.open(e.link,e.name)}function y(e){S.open(e)}function C(e){e.isLiked()?p.dislikeCard(e.id):p.likeCard(e.id),e.setLikeBtnState()}function B(t){return new e(t,"#card-template",k,y,C).getView()}p.getCurrentUser().then((e=>{L.setUserInfo(e.name,e.about),L.setAvatar(e.avatar)})),o.addEventListener("click",(()=>{!function(){const e=L.getUserInfo();c.value=e.name,d.value=e.job}(),_.setButtonState(),_.clearValidationErrors(),f.open()})),h.addEventListener("click",(()=>{u.setButtonState(),u.clearValidationErrors(),v.open()})),a.addEventListener("click",(()=>{m.setButtonState(),m.clearValidationErrors(),g.open()})),document.querySelector("body").classList.remove("no-transition")}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eEwsS0FDaEQsQ0FFQSxTQUFTRixFQUFxQjRLLEdBQzVCTixFQUFnQjFFLEtBQUtnRixFQUN2QixDQVFBLFNBQVMzSyxFQUFtQjJLLEdBQ3JCQSxFQUFVdkssVUFHYitHLEVBQUk4QixZQUFZMEIsRUFBVXJLLElBRjFCNkcsRUFBSTZCLFNBQVMyQixFQUFVckssSUFJekJxSyxFQUFVL0osaUJBQ1osQ0FLQSxTQUFTd0ksRUFBZ0JRLEdBU3ZCLE9BUGEsSUFBSWxLLEVBQ2ZrSyxFQUNBLGlCQUNBNEIsRUFDQXpMLEVBQ0FDLEdBRVV3QixTQUNkLENBL0ZBMkYsRUFBSWdCLGlCQUFpQlIsTUFBTUcsSUFDekIyQixFQUFTQyxZQUFZNUIsRUFBTzdILEtBQU02SCxFQUFPTyxPQUN6Q29CLEVBQVNNLFVBQVVqQyxFQUFPYyxPQUFPLElBeUduQ25DLEVBQWVwRixpQkFBaUIsU0FBUyxNQVZ6QyxXQUNFLE1BQU1xSyxFQUFPakMsRUFBUzZCLGNBQ3RCMUUsRUFBc0JMLE1BQVFtRixFQUFLekwsS0FDbkM0RyxFQUE2Qk4sTUFBUW1GLEVBQUtILEdBQzVDLENBT0VJLEdBQ0E1RSxFQUEwQjlDLGlCQUMxQjhDLEVBQTBCN0Msd0JBQzFCbUYsRUFBYTFELE1BQU0sSUFFckJtQixFQUFXekYsaUJBQWlCLFNBQVMsS0FDbkM0RixFQUF1QmhELGlCQUN2QmdELEVBQXVCL0Msd0JBQ3ZCeUYsRUFBYWhFLE1BQU0sSUFFckJlLEVBQWNyRixpQkFBaUIsU0FBUyxLQUN0QzZGLEVBQXlCakQsaUJBQ3pCaUQsRUFBeUJoRCx3QkFDekIyRixFQUFZbEUsTUFBTSxJQU1wQmxFLFNBQVNDLGNBQWMsUUFBUVosVUFBVUssT0FBTyxnQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwQ29uZmlybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcbiAgY29uc3RydWN0b3IoXG4gICAgeyBuYW1lLCBsaW5rLCBfaWQsIGlzTGlrZWQgfSxcbiAgICBjYXJkU2VsZWN0b3IsXG4gICAgaGFuZGxlSW1hZ2VDbGljayxcbiAgICBoYW5kbGVEZWxldGVCdG5DbGljayxcbiAgICBoYW5kbGVMaWtlQnRuQ2xpY2tcbiAgKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmxpbmsgPSBsaW5rO1xuICAgIHRoaXMuaWQgPSBfaWQ7XG4gICAgdGhpcy5faW5pdGlhbFN0YXRlID0gaXNMaWtlZDtcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQnRuQ2xpY2sgPSBoYW5kbGVEZWxldGVCdG5DbGljaztcbiAgICB0aGlzLl9oYW5kbGVMaWtlQnRuQ2xpY2sgPSBoYW5kbGVMaWtlQnRuQ2xpY2s7XG4gIH1cblxuICBzZXRMaWtlQnRuU3RhdGUgPSAoKSA9PiB7XG4gICAgdGhpcy5fbGlrZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xuICB9O1xuXG4gIGlzTGlrZWQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX2xpa2VCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xuICB9O1xuXG4gIGhhbmRsZURlbGV0ZSA9ICgpID0+IHtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcbiAgfTtcblxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgLy9BZGRzIGxpc3RlbmVyc1xuICAgIHRoaXMuX2xpa2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUxpa2VCdG5DbGljayh0aGlzKTtcbiAgICB9KTtcbiAgICB0aGlzLl9kZWxldGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJ0bkNsaWNrKHRoaXMpO1xuICAgIH0pO1xuICAgIHRoaXMuX2ltYWdlRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sodGhpcyk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRWaWV3KCkge1xuICAgIC8vY2xvbmVzIHRlbXBcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXG4gICAgICAuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAvL0dyYWIgYWxsIGVsZW1lbnRzXG4gICAgdGhpcy5fbGlrZUJ0biA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIik7XG4gICAgdGhpcy5fZGVsZXRlQnRuID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpO1xuICAgIHRoaXMuX2ltYWdlRWwgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xuICAgIHRoaXMuX3RpdGxlRWwgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpO1xuXG4gICAgLy9TZXRzIExpc3RlbmVyc1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAvL1NldHMgY2FyZCB2YWx1ZXNcbiAgICB0aGlzLl9pbWFnZUVsLnNyYyA9IHRoaXMubGluaztcbiAgICB0aGlzLl9pbWFnZUVsLmFsdCA9IHRoaXMubmFtZTtcbiAgICB0aGlzLl90aXRsZUVsLnRleHRDb250ZW50ID0gdGhpcy5uYW1lO1xuICAgIGlmICh0aGlzLl9pbml0aWFsU3RhdGUpIHtcbiAgICAgIHRoaXMuc2V0TGlrZUJ0blN0YXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xuICB9XG59XG4iLCIvL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtRWwpIHtcclxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcclxuICAgIHRoaXMuX2Zvcm1FbCA9IGZvcm1FbDtcclxuICB9XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsKSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbCA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JNZXNzYWdlRWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuZXJyb3JNZXNzYWdlQ2xhc3NWaXNpYmxlKTtcclxuICAgIGVycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gaW5wdXRFbC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICB9XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbCA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgZXJyb3JNZXNzYWdlRWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuZXJyb3JNZXNzYWdlQ2xhc3NWaXNpYmxlKTtcclxuICAgIGlucHV0RWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuaW5wdXRFcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9jaGVja1ZhbGlkaXR5KGlucHV0RWwpIHtcclxuICAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2FsbElucHV0c1ZhbGlkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0RWxzLmV2ZXJ5KChpbnB1dEVsKSA9PiB7XHJcbiAgICAgIHJldHVybiBpbnB1dEVsLnZhbGlkaXR5LnZhbGlkO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5fYWxsSW5wdXRzVmFsaWQoKSkge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIHRoaXMuX2NvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICAgKTtcclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcblxyXG4gICAgdGhpcy5faW5wdXRFbHMuZm9yRWFjaCgoaW5wdXRFbCkgPT4ge1xyXG4gICAgICBpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrVmFsaWRpdHkoaW5wdXRFbCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX2lucHV0RWxzID0gW1xyXG4gICAgICAuLi50aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9jb25maWcuaW5wdXRTZWxlY3RvciksXHJcbiAgICBdO1xyXG5cclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBzZXRCdXR0b25TdGF0ZSgpIHtcclxuICAgIC8vRGlzYWJsZSBTdGF0ZSBvZiBidXR0b25cclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgfVxyXG5cclxuICBjbGVhclZhbGlkYXRpb25FcnJvcnMoKSB7XHJcbiAgICB0aGlzLl9pbnB1dEVscy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsIi8vXHJcblxyXG5jb25zdCBpbml0aWFsQ2FyZHMgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC95b3NlbWl0ZS5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGFrZSBMb3Vpc2VcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9iYWxkLW1vdW50YWlucy5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhdGVtYXIuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIlZhbm9pc2UgTmF0aW9uYWwgUGFya1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhcmdvIGRpIEJyYWllc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXHJcbiAgfSxcclxuXTtcclxuXHJcbmNvbnN0IHZhbGlkYXRvckNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2l0ZW1cIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX2J1dHRvblwiLFxyXG4gIGVycm9yTWVzc2FnZUNsYXNzOiBcIm1vZGFsX19lcnJvclwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbl9kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faXRlbV90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JNZXNzYWdlQ2xhc3NWaXNpYmxlOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcblxyXG5leHBvcnQgeyBpbml0aWFsQ2FyZHMsIHZhbGlkYXRvckNvbmZpZyB9O1xyXG4iLCIvL05lZWQgdG8gY3JlYXRlIHRoZSByZW5kZXJlciBmdW5jdGlvblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xuICB9XG5cbiAgcmVuZGVySXRlbXMoKSB7XG4gICAgLy9yZW5kZXJzIGFsbCBlbGVtZW50cyBvbiB0aGUgc2NyZWVuXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgLy9yZW5kZXJlciByZW5kZXJzIGVhY2ggaW5kaXZpZHVhbCBlbGVtZW50XG4gICAgICB0aGlzLmFkZEl0ZW0odGhpcy5fcmVuZGVyZXIoaXRlbSkpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkSXRlbShlbGVtZW50KSB7XG4gICAgLy9BZGRzIGl0IHRvIHRoZSBjb250YWluZXJcbiAgICB0aGlzLl9jb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBlbGVtZW50KTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgdGhpcy5fcG9wdXBFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XG4gIH1cblxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZSkgPT4ge1xuICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBsb2FkaW5nKHllcykge1xuICAgIGlmICh5ZXMpIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IFwiU2F2aW5nLi4uXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xuICAgIH1cbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5fcG9wdXBFbC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX3BvcHVwRWwuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9zdWJtaXRCdG4gPSB0aGlzLl9wb3B1cEVsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2J1dHRvblwiKTtcbiAgICB0aGlzLl9wb3B1cEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcbiAgICAgIC8vQWxsb3dzIHRoZSBvdmVybGF5IGFuZCBjbG9zZSBidXR0b24gdG8gY2xvc2UgdGhlIG1vZGFsXG4gICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfb3BlbmVkXCIpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2Nsb3NlXCIpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZVN1Ym1pdEZvcm0pIHtcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXRGb3JtID0gaGFuZGxlU3VibWl0Rm9ybTtcbiAgICB0aGlzLl9mb3JtRWwgPSB0aGlzLl9wb3B1cEVsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XG4gICAgdGhpcy5faW5wdXRFbHMgPSBBcnJheS5mcm9tKHRoaXMuX3BvcHVwRWwucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faXRlbVwiKSk7XG4gIH1cblxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgY29uc3QgdmFsdWVzID0ge307XG5cbiAgICB0aGlzLl9pbnB1dEVscy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XG4gICAgICB2YWx1ZXNbaW5wdXRFbC5uYW1lXSA9IGlucHV0RWwudmFsdWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9mb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybShlLCB0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgdGhpcy5fZm9ybUVsLnJlc2V0KCk7XG4gIH1cbn1cbiIsIi8vXG5cbi8vQ1NTXG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuXG4vL0phdmFzY3JpcHRcblxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdG9yQ29uZmlnIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IFBvcHVwQ29uZmlybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cENvbmZpcm0uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiO1xuXG4vKioqKioqKioqKioqXG4gKiBFTEVNRU5UUyAqXG4gKioqKioqKioqKioqL1xuLy9Qcm9maWxlIGVsZW1lbnRzXG5jb25zdCBwcm9maWxlRWRpdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1lZGl0LWJ1dHRvblwiKTtcbmNvbnN0IHByb2ZpbGVBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYXZhdGFyXCIpO1xuXG4vL3Byb2ZpbGUgbW9kYWwgZWxlbWVudHNcbmNvbnN0IHByb2ZpbGVFZGl0TW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiKTtcbmNvbnN0IHByb2ZpbGVNb2RhbE5hbWVJbnB1dCA9IHByb2ZpbGVFZGl0TW9kYWwucXVlcnlTZWxlY3RvcihcbiAgXCIjcHJvZmlsZS1tb2RhbC1uYW1lLWlucHV0XCJcbik7XG5jb25zdCBwcm9maWxlTW9kYWxEZXNjcmlwdGlvbklucHV0ID0gcHJvZmlsZUVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFxuICBcIiNwcm9maWxlLW1vZGFsLWRlc2NyaXB0aW9uLWlucHV0XCJcbik7XG5cbi8vY2FyZCBlbGVtZW50c1xuY29uc3QgYWRkQ2FyZEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtYnV0dG9uXCIpO1xuXG4vKioqKioqKioqKioqKioqKioqXG4gKiBGT1JNIFZBTElEQVRPUlMgKlxuICoqKioqKioqKioqKioqKioqKi9cbmNvbnN0IHByb2ZpbGVNb2RhbEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgdmFsaWRhdG9yQ29uZmlnLFxuICBkb2N1bWVudC5mb3Jtc1tcInByb2ZpbGUtbW9kYWwtZm9ybVwiXVxuKTtcbmNvbnN0IGNhcmRNb2RhbEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgdmFsaWRhdG9yQ29uZmlnLFxuICBkb2N1bWVudC5mb3Jtc1tcImNhcmQtbW9kYWwtZm9ybVwiXVxuKTtcbmNvbnN0IGF2YXRhck1vZGFsRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxuICB2YWxpZGF0b3JDb25maWcsXG4gIGRvY3VtZW50LmZvcm1zW1wiYXZhdGFyLW1vZGFsLWZvcm1cIl1cbik7XG5cbnByb2ZpbGVNb2RhbEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuY2FyZE1vZGFsRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5hdmF0YXJNb2RhbEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG4vKioqKioqKlxuICogQVBJICpcbiAqKioqKioqL1xuY29uc3QgdG9rZW4gPSBcImMyYjBmYjhmLTVlMmMtNDVkMy05ZTQwLWJiZTQ4OTA1YjQ0NlwiO1xuXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxuICBoZWFkZXJzOiB7XG4gICAgYXV0aG9yaXphdGlvbjogdG9rZW4sXG4gICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gIH0sXG59KTtcblxuLyoqKioqKioqKioqKlxuICogU0VDVElPTlMgKlxuICoqKioqKioqKioqKi9cbmxldCBjYXJkU2VjdGlvbjtcblxuYXBpLmdldEluaXRpYWxDYXJkcygpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICBjYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxuICAgIHsgaXRlbXM6IHJlc3VsdCwgcmVuZGVyZXI6IGNyZWF0ZU5ld0NhcmRFbCB9LFxuICAgIFwiLmNhcmRzX19saXN0XCJcbiAgKTtcbiAgY2FyZFNlY3Rpb24ucmVuZGVySXRlbXMoKTtcbn0pO1xuXG4vKioqKioqKioqKlxuICogUE9QVVBTICpcbiAqKioqKioqKioqL1xuY29uc3QgcHJvZmlsZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXG4gIFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxuICBoYW5kbGVQcm9maWxlRWRpdFN1Ym1pdFxuKTtcbmNvbnN0IGFkZENhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxuICBcIiNjYXJkLWFkZC1tb2RhbFwiLFxuICBoYW5kbGVBZGRDYXJkTW9kYWxTdWJtaXRcbik7XG5jb25zdCBhdmF0YXJNb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiI2F2YXRhci1tb2RhbFwiLCBoYW5kbGVBdmF0YXJNb2RhbFN1Ym1pdCk7XG5jb25zdCBwaWN0dXJlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIjcGljdHVyZS1tb2RhbFwiKTtcbmNvbnN0IGRlbGV0ZUNhcmRQb3B1cCA9IG5ldyBQb3B1cENvbmZpcm0oXG4gIFwiI2NhcmQtZGVsZXRlLW1vZGFsXCIsXG4gIGhhbmRsZVBvcHVwQnV0dG9uQ2xpY2tcbik7XG5cbnByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuYWRkQ2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5hdmF0YXJNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xucGljdHVyZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5kZWxldGVDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLyoqKioqKioqKioqKlxuICogVVNFUklORk8gKlxuICoqKioqKioqKioqKi9cblxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICBuYW1lU2VsZWN0b3I6IFwiI3Byb2ZpbGUtdGl0bGVcIixcbiAgam9iU2VsZWN0b3I6IFwiI3Byb2ZpbGUtZGVzY3JpcHRpb25cIixcbiAgYXZhdGFyU2VsZWN0b3I6IFwiI3Byb2ZpbGUtaW1hZ2VcIixcbn0pO1xuXG5hcGkuZ2V0Q3VycmVudFVzZXIoKS50aGVuKChyZXN1bHQpID0+IHtcbiAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzdWx0Lm5hbWUsIHJlc3VsdC5hYm91dCk7XG4gIHVzZXJJbmZvLnNldEF2YXRhcihyZXN1bHQuYXZhdGFyKTtcbn0pO1xuXG4vKioqKioqKioqKioqKioqKioqXG4gKiBFVkVOVCBIQU5ETEVSUyAqXG4gKioqKioqKioqKioqKioqKioqL1xuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUVkaXRTdWJtaXQoZSwgeyB0aXRsZSwgZGVzY3JpcHRpb24gfSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHByb2ZpbGVQb3B1cC5sb2FkaW5nKHRydWUpO1xuICBhcGlcbiAgICAudXBkYXRlVXNlcih0aXRsZSwgZGVzY3JpcHRpb24pXG4gICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgdXNlckluZm8uc2V0VXNlckluZm8odGl0bGUsIGRlc2NyaXB0aW9uKTtcbiAgICAgIHByb2ZpbGVQb3B1cC5sb2FkaW5nKGZhbHNlKTtcbiAgICAgIHByb2ZpbGVQb3B1cC5jbG9zZSgpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVBZGRDYXJkTW9kYWxTdWJtaXQoZSwgY2FyZERhdGEpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBhZGRDYXJkUG9wdXAubG9hZGluZyh0cnVlKTtcbiAgYXBpXG4gICAgLmNyZWF0ZUNhcmQoY2FyZERhdGEubmFtZSwgY2FyZERhdGEubGluaylcbiAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKGNyZWF0ZU5ld0NhcmRFbChjYXJkRGF0YSkpO1xuICAgICAgYWRkQ2FyZFBvcHVwLmxvYWRpbmcoZmFsc2UpO1xuICAgICAgYWRkQ2FyZFBvcHVwLmNsb3NlKCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUF2YXRhck1vZGFsU3VibWl0KGUsIHsgbGluayB9KSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgYXZhdGFyTW9kYWwubG9hZGluZyh0cnVlKTtcbiAgYXBpXG4gICAgLnVwZGF0ZUF2YXRhcihsaW5rKVxuICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxuICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgIHVzZXJJbmZvLnNldEF2YXRhcihsaW5rKTtcbiAgICAgIGF2YXRhck1vZGFsLmxvYWRpbmcoZmFsc2UpO1xuICAgICAgYXZhdGFyTW9kYWwuY2xvc2UoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ2FyZENsaWNrKGNhcmRPYmplY3QpIHtcbiAgcGljdHVyZVBvcHVwLm9wZW4oY2FyZE9iamVjdC5saW5rLCBjYXJkT2JqZWN0Lm5hbWUpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVCdG5DbGljayhjYWxsZWRPYmopIHtcbiAgZGVsZXRlQ2FyZFBvcHVwLm9wZW4oY2FsbGVkT2JqKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUG9wdXBCdXR0b25DbGljayhjYWxsZWRPYmopIHtcbiAgY2FsbGVkT2JqLmhhbmRsZURlbGV0ZSgpO1xuICBhcGkuZGVsZXRlQ2FyZChjYWxsZWRPYmouaWQpO1xuICBkZWxldGVDYXJkUG9wdXAuY2xvc2UoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTGlrZUJ0bkNsaWNrKGNhbGxlZE9iaikge1xuICBpZiAoIWNhbGxlZE9iai5pc0xpa2VkKCkpIHtcbiAgICBhcGkubGlrZUNhcmQoY2FsbGVkT2JqLmlkKTtcbiAgfSBlbHNlIHtcbiAgICBhcGkuZGlzbGlrZUNhcmQoY2FsbGVkT2JqLmlkKTtcbiAgfVxuICBjYWxsZWRPYmouc2V0TGlrZUJ0blN0YXRlKCk7XG59XG4vKioqKioqKioqKioqKlxuICogRlVOQ1RJT05TICpcbiAqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdDYXJkRWwoY2FyZERhdGEpIHtcbiAgLy9DcmVhdGVzIG5ldyBjYXJkIE9iamVjdCBhbmQgdGhlbiByZXR1cm5zIGl0cyBlbGVtZW50XG4gIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZChcbiAgICBjYXJkRGF0YSxcbiAgICBcIiNjYXJkLXRlbXBsYXRlXCIsXG4gICAgaGFuZGxlQ2FyZENsaWNrLFxuICAgIGhhbmRsZURlbGV0ZUJ0bkNsaWNrLFxuICAgIGhhbmRsZUxpa2VCdG5DbGlja1xuICApO1xuICByZXR1cm4gY2FyZC5nZXRWaWV3KCk7XG59XG5cbmZ1bmN0aW9uIGZpbGxQcm9maWxlRm9ybSgpIHtcbiAgY29uc3QgaW5mbyA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gIHByb2ZpbGVNb2RhbE5hbWVJbnB1dC52YWx1ZSA9IGluZm8ubmFtZTtcbiAgcHJvZmlsZU1vZGFsRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IGluZm8uam9iO1xufVxuXG4vKioqKioqKioqKioqKioqKioqKlxuICogRVZFTlQgTElTVEVORVJTICpcbiAqKioqKioqKioqKioqKioqKioqL1xuLy9PcGVuIE1vZGFsc1xucHJvZmlsZUVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgZmlsbFByb2ZpbGVGb3JtKCk7XG4gIHByb2ZpbGVNb2RhbEZvcm1WYWxpZGF0b3Iuc2V0QnV0dG9uU3RhdGUoKTtcbiAgcHJvZmlsZU1vZGFsRm9ybVZhbGlkYXRvci5jbGVhclZhbGlkYXRpb25FcnJvcnMoKTtcbiAgcHJvZmlsZVBvcHVwLm9wZW4oKTtcbn0pO1xuYWRkQ2FyZEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBjYXJkTW9kYWxGb3JtVmFsaWRhdG9yLnNldEJ1dHRvblN0YXRlKCk7XG4gIGNhcmRNb2RhbEZvcm1WYWxpZGF0b3IuY2xlYXJWYWxpZGF0aW9uRXJyb3JzKCk7XG4gIGFkZENhcmRQb3B1cC5vcGVuKCk7XG59KTtcbnByb2ZpbGVBdmF0YXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgYXZhdGFyTW9kYWxGb3JtVmFsaWRhdG9yLnNldEJ1dHRvblN0YXRlKCk7XG4gIGF2YXRhck1vZGFsRm9ybVZhbGlkYXRvci5jbGVhclZhbGlkYXRpb25FcnJvcnMoKTtcbiAgYXZhdGFyTW9kYWwub3BlbigpO1xufSk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKlxuICogRU5BQkxFUyBUUkFOU0lUSU9OUyAqXG4gKioqKioqKioqKioqKioqKioqKioqKiovXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKS5jbGFzc0xpc3QucmVtb3ZlKFwibm8tdHJhbnNpdGlvblwiKTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsO1xuICAgIHRoaXMuX2hlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnM7XG4gIH1cblxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgLy9HZXRzIHRoZSBpbml0aWFsIGNhcmRzXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gIH1cblxuICBnZXRDdXJyZW50VXNlcigpIHtcbiAgICAvL0dldHMgdGhlIGN1cnJlbnQgdXNlcidzIGluZm9cbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcbiAgfVxuXG4gIHVwZGF0ZVVzZXIobmFtZSwgYWJvdXQpIHtcbiAgICAvL1VwZGF0ZXMgdXNlciBpbmZvcm1hdGlvblxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgYWJvdXQ6IGFib3V0LFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVBdmF0YXIoYXZhdGFyVXJsKSB7XG4gICAgLy9VcGRhdGVzIHRoZSBjdXJyZW50IHVzZXIncyBhdmF0YXJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBhdmF0YXI6IGF2YXRhclVybCxcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlQ2FyZChuYW1lLCBsaW5rKSB7XG4gICAgLy9BZGRpbmcgYSBuZXcgY2FyZFxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBsaW5rOiBsaW5rLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgIC8vRGVsZXRlcyBhIGNhcmRcbiAgICBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcbiAgfVxuXG4gIGxpa2VDYXJkKGNhcmRJZCkge1xuICAgIC8vTGlrZXMgYSBjYXJkXG4gICAgZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gIH1cblxuICBkaXNsaWtlQ2FyZChjYXJkSWQpIHtcbiAgICAvL0Rpc2xpa2VzIGEgY2FyZFxuICAgIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSlcbiAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9waWN0dXJlRWwgPSB0aGlzLl9wb3B1cEVsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xuICAgIHRoaXMuX2NhcHRpb25FbCA9IHRoaXMuX3BvcHVwRWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fdGl0bGVcIik7XG4gIH1cblxuICBvcGVuKGltYWdlU3JjLCBuYW1lKSB7XG4gICAgdGhpcy5fcGljdHVyZUVsLnNyYyA9IGltYWdlU3JjO1xuICAgIHRoaXMuX3BpY3R1cmVFbC5hbHQgPSBuYW1lO1xuICAgIHRoaXMuX2NhcHRpb25FbC5pbm5lclRleHQgPSBuYW1lO1xuICAgIHN1cGVyLm9wZW4oKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwQ29uZmlybSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlQnV0dG9uQ2xpY2spIHtcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9oYW5kbGVCdXR0b25DbGljayA9IGhhbmRsZUJ1dHRvbkNsaWNrO1xuICAgIHRoaXMuX2J1dHRvbiA9IHRoaXMuX3BvcHVwRWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUJ1dHRvbkNsaWNrKHRoaXMuX2NhbGxlZEVsKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9wZW4oY2FsbGVkRWwpIHtcbiAgICBzdXBlci5vcGVuKCk7XG4gICAgdGhpcy5fY2FsbGVkRWwgPSBjYWxsZWRFbDtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgdGhpcy5fY2FsbGVkRWwgPSBudWxsO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKHsgbmFtZVNlbGVjdG9yLCBqb2JTZWxlY3RvciwgYXZhdGFyU2VsZWN0b3IgfSkge1xuICAgIHRoaXMuX25hbWVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcbiAgICB0aGlzLl9qb2JFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioam9iU2VsZWN0b3IpO1xuICAgIHRoaXMuX2F2YXRhckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XG4gICAgdGhpcy5fbmFtZSA9IHRoaXMuX25hbWVFbC50ZXh0Q29udGVudDtcbiAgICB0aGlzLl9qb2IgPSB0aGlzLl9qb2JFbC50ZXh0Q29udGVudDtcbiAgICB0aGlzLl9hdmF0YXIgPSB0aGlzLl9hdmF0YXJFbC5zcmM7XG4gIH1cblxuICBfc2V0UGFnZSgpIHtcbiAgICB0aGlzLl9qb2JFbC50ZXh0Q29udGVudCA9IHRoaXMuX2pvYjtcbiAgICB0aGlzLl9uYW1lRWwudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xuICAgIHRoaXMuX2F2YXRhckVsLnNyYyA9IHRoaXMuX2F2YXRhcjtcbiAgfVxuXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB7IG5hbWU6IHRoaXMuX25hbWUsIGpvYjogdGhpcy5fam9iIH07XG4gIH1cblxuICBzZXRVc2VySW5mbyhuYW1lLCBqb2IpIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB0aGlzLl9qb2IgPSBqb2I7XG4gICAgdGhpcy5fc2V0UGFnZSgpO1xuICB9XG5cbiAgc2V0QXZhdGFyKGF2YXRhcikge1xuICAgIHRoaXMuX2F2YXRhciA9IGF2YXRhcjtcbiAgICB0aGlzLl9zZXRQYWdlKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJDYXJkIiwiY29uc3RydWN0b3IiLCJfcmVmIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZURlbGV0ZUJ0bkNsaWNrIiwiaGFuZGxlTGlrZUJ0bkNsaWNrIiwibmFtZSIsImxpbmsiLCJfaWQiLCJpc0xpa2VkIiwidGhpcyIsImlkIiwiX2luaXRpYWxTdGF0ZSIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVEZWxldGVCdG5DbGljayIsIl9oYW5kbGVMaWtlQnRuQ2xpY2siLCJzZXRMaWtlQnRuU3RhdGUiLCJfbGlrZUJ0biIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImNvbnRhaW5zIiwiaGFuZGxlRGVsZXRlIiwiX2NhcmRFbGVtZW50IiwicmVtb3ZlIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9kZWxldGVCdG4iLCJfaW1hZ2VFbCIsImdldFZpZXciLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjbG9uZU5vZGUiLCJfdGl0bGVFbCIsInNyYyIsImFsdCIsInRleHRDb250ZW50IiwiRm9ybVZhbGlkYXRvciIsImNvbmZpZyIsImZvcm1FbCIsIl9jb25maWciLCJfZm9ybUVsIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbCIsImVycm9yTWVzc2FnZUVsIiwiYWRkIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JNZXNzYWdlQ2xhc3NWaXNpYmxlIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGlkZUlucHV0RXJyb3IiLCJfY2hlY2tWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJfYWxsSW5wdXRzVmFsaWQiLCJfaW5wdXRFbHMiLCJldmVyeSIsIl90b2dnbGVCdXR0b25TdGF0ZSIsIl9zdWJtaXRCdXR0b24iLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJmb3JFYWNoIiwiZSIsImVuYWJsZVZhbGlkYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dFNlbGVjdG9yIiwic2V0QnV0dG9uU3RhdGUiLCJjbGVhclZhbGlkYXRpb25FcnJvcnMiLCJ2YWxpZGF0b3JDb25maWciLCJmb3JtU2VsZWN0b3IiLCJlcnJvck1lc3NhZ2VDbGFzcyIsIlNlY3Rpb24iLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJpdGVtIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbCIsIl9oYW5kbGVFc2NDbG9zZSIsImtleSIsImNsb3NlIiwibG9hZGluZyIsInllcyIsIl9zdWJtaXRCdG4iLCJvcGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZVN1Ym1pdEZvcm0iLCJzdXBlciIsIl9oYW5kbGVTdWJtaXRGb3JtIiwiQXJyYXkiLCJmcm9tIiwiX2dldElucHV0VmFsdWVzIiwidmFsdWVzIiwidmFsdWUiLCJyZXNldCIsInByb2ZpbGVFZGl0QnRuIiwicHJvZmlsZUF2YXRhciIsInByb2ZpbGVFZGl0TW9kYWwiLCJwcm9maWxlTW9kYWxOYW1lSW5wdXQiLCJwcm9maWxlTW9kYWxEZXNjcmlwdGlvbklucHV0IiwiYWRkQ2FyZEJ0biIsInByb2ZpbGVNb2RhbEZvcm1WYWxpZGF0b3IiLCJmb3JtcyIsImNhcmRNb2RhbEZvcm1WYWxpZGF0b3IiLCJhdmF0YXJNb2RhbEZvcm1WYWxpZGF0b3IiLCJhcGkiLCJvcHRpb25zIiwiX2Jhc2VVcmwiLCJiYXNlVXJsIiwiX2hlYWRlcnMiLCJoZWFkZXJzIiwiZ2V0SW5pdGlhbENhcmRzIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsInJlc3VsdCIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImdldEN1cnJlbnRVc2VyIiwidXBkYXRlVXNlciIsImFib3V0IiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVBdmF0YXIiLCJhdmF0YXJVcmwiLCJhdmF0YXIiLCJjcmVhdGVDYXJkIiwiZGVsZXRlQ2FyZCIsImNhcmRJZCIsImxpa2VDYXJkIiwiZGlzbGlrZUNhcmQiLCJhdXRob3JpemF0aW9uIiwiY2FyZFNlY3Rpb24iLCJjcmVhdGVOZXdDYXJkRWwiLCJwcm9maWxlUG9wdXAiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZmluYWxseSIsInVzZXJJbmZvIiwic2V0VXNlckluZm8iLCJhZGRDYXJkUG9wdXAiLCJjYXJkRGF0YSIsImF2YXRhck1vZGFsIiwiX3JlZjIiLCJzZXRBdmF0YXIiLCJwaWN0dXJlUG9wdXAiLCJfcGljdHVyZUVsIiwiX2NhcHRpb25FbCIsImltYWdlU3JjIiwiaW5uZXJUZXh0IiwiZGVsZXRlQ2FyZFBvcHVwIiwiaGFuZGxlQnV0dG9uQ2xpY2siLCJfaGFuZGxlQnV0dG9uQ2xpY2siLCJfYnV0dG9uIiwiX2NhbGxlZEVsIiwiY2FsbGVkRWwiLCJjYWxsZWRPYmoiLCJuYW1lU2VsZWN0b3IiLCJqb2JTZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwiX25hbWVFbCIsIl9qb2JFbCIsIl9hdmF0YXJFbCIsIl9uYW1lIiwiX2pvYiIsIl9hdmF0YXIiLCJfc2V0UGFnZSIsImdldFVzZXJJbmZvIiwiam9iIiwiaGFuZGxlQ2FyZENsaWNrIiwiY2FyZE9iamVjdCIsImluZm8iLCJmaWxsUHJvZmlsZUZvcm0iXSwic291cmNlUm9vdCI6IiJ9